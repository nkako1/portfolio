{"version":3,"sources":["img/NoraKakoResume.pdf","Home.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","Home","className","id","href","target","rel","ClearBar","styled","AppBar","backgroundColor","border","borderRadius","boxShadow","color","height","padding","maxWidth","margin","justifyContent","NavLink","Link","fontFamily","fontWeight","letterSpacing","textDecoration","App","position","smooth","to","Pdf","path","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"sGAAAA,EAAOC,QAAU,IAA0B,4C,qMCmB5BC,MAhBf,WACE,OAEE,yBAAKC,UAAU,WACb,yBAAKC,GAAG,SAAR,oBAEE,6BAFF,uGAGE,6BAAM,6BAHR,yCAIkC,uBAAGD,UAAU,4BAA4BE,KAAK,sBAAsBC,OAAO,SAASC,IAAI,uBAAxF,gBAJlC,oCAKE,6BAAM,6BACN,uBAAGJ,UAAU,4BAA4BC,GAAG,UAAUC,KAAK,gDAAgDC,OAAO,SAASC,IAAI,uBAA/H,0B,wDCGFC,EAAWC,YAAOC,IAAPD,CAAe,CAC9BE,gBAAiB,cACjBC,OAAQ,EACRC,aAAc,EACdC,UAAW,OACXC,MAAO,QACPC,OAAQ,GACRC,QAAS,UACTC,SAAU,OACVC,OAAQ,IACRC,eAAgB,kBAGZC,EAAUZ,YAAOa,IAAPb,CAAa,CAC3BM,MAAO,OACPQ,WAAY,sBACZC,WAAY,MACZC,cAAe,MACfC,eAAgB,SAGH,SAASC,IACtB,OACE,kBAAC,IAAD,KACE,kBAACnB,EAAD,CAAUoB,SAAS,WAAWxB,GAAG,aAC/B,0CACA,yBAAKD,UAAU,QAAf,oBAAuC,6BAAvC,eAAyD,uBAAGA,UAAU,mBAAmBE,KAAK,sBAAsBC,OAAO,SAASC,IAAI,uBAA/E,UACzD,yBAAKJ,UAAU,QAAf,eAAkC,6BAAlC,iBACA,yBAAKA,UAAU,OACb,uBAAGA,UAAU,kBAAkBE,KAAK,2BAA2BC,OAAO,SAASC,IAAI,uBAAnF,SACA,kBAACc,EAAD,CAASQ,QAAM,EAACC,GAAG,YAAY3B,UAAU,mBAAzC,YACA,uBAAGA,UAAU,mBAAmBE,KAAM0B,IAAKzB,OAAO,SAASC,IAAI,uBAA/D,YAGJ,kBAAC,IAAD,KACE,kBAAC,IAAD,CAAOyB,KAAK,KACT,kBAAC,EAAD,SCxCSC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.2be09dc7.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/NoraKakoResume.3495dd7c.pdf\";","import React from 'react';\nimport './Home.css';\n\nfunction Home() {\n  return (\n\n    <div className=\"wrapper\">\n      <div id=\"hello\">\n        Hi I’m Nora.\n        <br />I’m a multidisciplinary designer, focused on creating clean and functional digital experiences.\n        <br /><br />\n      \tCurrently, I’m leading design at <a className=\"hover-underline-animation\" href=\"https://flocksf.com\" target=\"_blank\" rel=\"noopener noreferrer\">Flock Studio</a>. Please reach out and say hello.\n        <br /><br />\n        <a className=\"hover-underline-animation\" id=\"contact\" href=\"mailto:nora@flocksf.com?Subject=Hello%20there\" target=\"_blank\" rel=\"noopener noreferrer\">nora[at]flocksf.com</a>\n      </div>\n    </div>\n  );\n}\n\nexport default Home;\n","import React from 'react';\nimport { styled } from '@material-ui/core/styles';\nimport Home from './Home.js';\nimport AppBar from '@material-ui/core/AppBar';\nimport { HashLink as Link } from 'react-router-hash-link';\nimport './App.css';\nimport Pdf from './img/NoraKakoResume.pdf';\nimport { CSSTransition, TransitionGroup } from 'react-transition-group';\n\n\nimport {\n  BrowserRouter as Router,\n  Switch,\n  Route\n} from \"react-router-dom\";\n\nconst ClearBar = styled(AppBar)({\n  backgroundColor: 'transparent',\n  border: 0,\n  borderRadius: 3,\n  boxShadow: 'none',\n  color: 'black',\n  height: 48,\n  padding: '80px 9%',\n  maxWidth: '100%',\n  margin: '0',\n  justifyContent: 'space-between',\n});\n\nconst NavLink = styled(Link)({\n  color: '#000',\n  fontFamily: 'Poppins, sans-serif',\n  fontWeight: '300',\n  letterSpacing: \"1px\",\n  textDecoration: 'none'\n});\n\nexport default function App() {\n  return (\n    <Router>\n      <ClearBar position=\"relative\" id=\"headerBar\">\n        <div>Nora Kako</div>\n        <div className=\"info\">Founder and lead <br />designer at <a className=\"static-underline\" href=\"https://flocksf.com\" target=\"_blank\" rel=\"noopener noreferrer\">Flock</a></div>\n        <div className=\"info\">Based in San<br />Francisco, CA</div>\n        <div className=\"nav\">\n          <a className=\"hover-underline\" href=\"https://flocksf.com/work\" target=\"_blank\" rel=\"noopener noreferrer\">Work,</a>\n          <NavLink smooth to=\"/#contact\" className=\"hover-underline\">Contact,</NavLink>\n          <a className=\"static-underline\" href={Pdf} target=\"_blank\" rel=\"noopener noreferrer\">Resume</a>\n        </div>\n      </ClearBar>\n      <Switch>\n        <Route path=\"/\">\n           <Home />\n        </Route>\n      </Switch>\n    </Router>\n  );\n}\n\n\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}